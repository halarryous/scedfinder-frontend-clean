'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import SearchBar from '@/components/Search/SearchBar';
import FilterPanel from '@/components/Search/FilterPanel';
import CertificationCard from '@/components/Shared/CertificationCard';
import Pagination from '@/components/Shared/Pagination';
import { certificationApi, userApi } from '@/lib/api-services';
import { useAuth } from '@/contexts/AuthContext';
import { Certification } from '@/types';
import { 
  AcademicCapIcon,
  ViewColumnsIcon,
  Bars3Icon,
  AdjustmentsHorizontalIcon,
  XMarkIcon,
  FunnelIcon,
  ShieldCheckIcon
} from '@heroicons/react/24/outline';

type ViewMode = 'grid' | 'list';
type SortOption = 'name' | 'code' | 'recent' | 'authority' | 'type';

export default function CertificationsPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user } = useAuth();

  const [certifications, setCertifications] = useState<Certification[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  const [sortBy, setSortBy] = useState<SortOption>('name');
  const [showFilters, setShowFilters] = useState(false);
  const [filters, setFilters] = useState({});
  const [searchQuery, setSearchQuery] = useState('');
  const [userFavorites, setUserFavorites] = useState<string[]>([]);
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');

  const itemsPerPage = 12;

  // Initialize from URL params
  useEffect(() => {
    const pageFromUrl = parseInt(searchParams.get('page') || '1');
    const queryFromUrl = searchParams.get('q') || '';
    const sortFromUrl = searchParams.get('sort') as SortOption || 'name';
    const statusFromUrl = searchParams.get('status') as 'all' | 'active' | 'inactive' || 'all';

    setCurrentPage(pageFromUrl);
    setSearchQuery(queryFromUrl);
    setSortBy(sortFromUrl);
    setStatusFilter(statusFromUrl);
  }, [searchParams]);

  // Load certifications
  useEffect(() => {
    loadCertifications();
  }, [currentPage, sortBy, filters, searchQuery, statusFilter]);

  // Load user favorites
  useEffect(() => {
    const loadUserFavorites = async () => {
      if (!user) return;
      
      try {
        const favoritesResponse = await userApi.getFavorites();
        const certificationIds = favoritesResponse.data
          .filter(f => f.favorite_type === 'certification')
          .map(f => f.item_id);
        setUserFavorites(certificationIds);
      } catch (error) {
        console.error('Failed to load user favorites:', error);
      }
    };

    loadUserFavorites();
  }, [user]);

  const loadCertifications = async () => {
    setLoading(true);
    setError(null);

    try {
      // Filter out SCED-specific parameters that certification API doesn't accept
      const { subject_area, cte_pathway, course_type, grade_level, ...certFilters } = filters;
      
      const response = await certificationApi.searchCertifications({
        query: searchQuery,
        ...certFilters, // Spread certification filters as individual parameters
        ...(statusFilter !== 'all' && { is_active: statusFilter === 'active' }),
        page: currentPage,
        limit: itemsPerPage,
        sortBy,
        sortOrder: 'asc'
      });

      setCertifications(response.certifications);
      setTotalItems(response.total);
      setTotalPages(Math.ceil(response.total / itemsPerPage));
    } catch (err: any) {
      console.error('Failed to load certifications:', err);
      setError(err.response?.data?.error?.message || 'Failed to load certifications. Please try again.');
      setCertifications([]);
      setTotalItems(0);
      setTotalPages(1);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    setCurrentPage(1);
    updateUrlParams({ q: query, page: '1' });
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    updateUrlParams({ page: page.toString() });
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleSortChange = (sort: SortOption) => {
    setSortBy(sort);
    setCurrentPage(1);
    updateUrlParams({ sort, page: '1' });
  };

  const handleFilterChange = useCallback((newFilters: any) => {
    setFilters(newFilters);
    setCurrentPage(1);
    updateUrlParams({ page: '1' });
  }, [searchParams, router]);

  const handleStatusFilterChange = (status: 'all' | 'active' | 'inactive') => {
    setStatusFilter(status);
    setCurrentPage(1);
    updateUrlParams({ status, page: '1' });
  };

  const updateUrlParams = (updates: Record<string, string>) => {
    const params = new URLSearchParams(searchParams.toString());
    
    Object.entries(updates).forEach(([key, value]) => {
      if (value && value !== 'all') {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    router.push(`/certifications?${params.toString()}`);
  };

  const handleCertificationToggleFavorite = async (certificationId: string, isFavorite: boolean) => {
    if (isFavorite) {
      setUserFavorites(prev => [...prev, certificationId]);
    } else {
      setUserFavorites(prev => prev.filter(id => id !== certificationId));
    }
  };

  const getActiveFiltersCount = () => {
    let count = Object.values(filters).filter(value => 
      Array.isArray(value) ? value.length > 0 : Boolean(value)
    ).length;
    
    if (statusFilter !== 'all') count++;
    
    return count;
  };

  const getStatusCounts = () => {
    const active = certifications.filter(c => c.is_active).length;
    const inactive = certifications.filter(c => !c.is_active).length;
    return { active, inactive, total: active + inactive };
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                <AcademicCapIcon className="h-8 w-8 text-secondary-600 mr-3" />
                Teacher Certifications
              </h1>
              <p className="text-gray-600 mt-1">
                Browse and search teacher certifications and their requirements
              </p>
            </div>
          </div>

          {/* Search Bar */}
          <div className="max-w-2xl">
            <SearchBar
              onSearch={handleSearch}
              placeholder="Search certification names, codes, subject areas..."
              showTypeToggle={false}
            />
          </div>

          {/* Status Filters */}
          <div className="mt-4 flex space-x-1 bg-gray-100 rounded-lg p-1 w-fit">
            {(['all', 'active', 'inactive'] as const).map((status) => (
              <button
                key={status}
                onClick={() => handleStatusFilterChange(status)}
                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                  statusFilter === status
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                <div className="flex items-center space-x-2">
                  {status === 'active' && <ShieldCheckIcon className="h-4 w-4 text-green-500" />}
                  {status === 'inactive' && <ShieldCheckIcon className="h-4 w-4 text-red-500" />}
                  <span className="capitalize">{status}</span>
                </div>
              </button>
            ))}
          </div>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Filters Sidebar */}
          <aside className={`lg:w-80 ${showFilters ? 'block' : 'hidden lg:block'}`}>
            <div className="sticky top-8">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200">
                <div className="p-4 border-b border-gray-200 lg:hidden">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900 flex items-center">
                      <FunnelIcon className="h-5 w-5 mr-2" />
                      Filters
                      {getActiveFiltersCount() > 0 && (
                        <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-secondary-100 text-secondary-800">
                          {getActiveFiltersCount()}
                        </span>
                      )}
                    </h3>
                    <button
                      onClick={() => setShowFilters(false)}
                      className="p-1 text-gray-400 hover:text-gray-500"
                    >
                      <XMarkIcon className="h-5 w-5" />
                    </button>
                  </div>
                </div>
                <FilterPanel
                  onFiltersChange={handleFilterChange}
                  className="border-none shadow-none"
                />
              </div>
            </div>
          </aside>

          {/* Main Content */}
          <main className="flex-1 min-w-0">
            {/* Controls Bar */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 space-y-4 sm:space-y-0">
              <div className="flex items-center space-x-4">
                {/* Mobile Filter Toggle */}
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="lg:hidden inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  <AdjustmentsHorizontalIcon className="h-4 w-4 mr-2" />
                  Filters
                  {getActiveFiltersCount() > 0 && (
                    <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-secondary-100 text-secondary-800">
                      {getActiveFiltersCount()}
                    </span>
                  )}
                </button>

                {/* Results Count */}
                <div className="text-sm text-gray-500">
                  {loading ? (
                    <div className="h-4 w-24 bg-gray-200 rounded animate-pulse"></div>
                  ) : (
                    <span>
                      Showing {totalItems.toLocaleString()} certification{totalItems !== 1 ? 's' : ''}
                    </span>
                  )}
                </div>
              </div>

              <div className="flex items-center space-x-4">
                {/* Sort Dropdown */}
                <select
                  value={sortBy}
                  onChange={(e) => handleSortChange(e.target.value as SortOption)}
                  className="rounded-md border-gray-300 text-sm focus:border-secondary-500 focus:ring-secondary-500"
                  disabled={loading}
                >
                  <option value="name">Sort by Name</option>
                  <option value="code">Sort by Code</option>
                  <option value="authority">Sort by Authority</option>
                  <option value="type">Sort by Type</option>
                  <option value="recent">Sort by Recently Added</option>
                </select>

                {/* View Toggle */}
                <div className="flex rounded-md border border-gray-300">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 text-sm font-medium rounded-l-md ${
                      viewMode === 'grid'
                        ? 'bg-secondary-50 text-secondary-600 border-secondary-300'
                        : 'bg-white text-gray-500 hover:text-gray-700'
                    }`}
                    disabled={loading}
                  >
                    <ViewColumnsIcon className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 text-sm font-medium rounded-r-md border-l ${
                      viewMode === 'list'
                        ? 'bg-secondary-50 text-secondary-600 border-secondary-300'
                        : 'bg-white text-gray-500 hover:text-gray-700'
                    }`}
                    disabled={loading}
                  >
                    <Bars3Icon className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>

            {/* Error Message */}
            {error && (
              <div className="mb-6 rounded-md bg-red-50 p-4">
                <div className="text-sm text-red-700">{error}</div>
              </div>
            )}

            {/* Loading State */}
            {loading && (
              <div className={viewMode === 'grid' 
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" 
                : "space-y-4"
              }>
                {[...Array(6)].map((_, i) => (
                  <div key={i} className="bg-white border border-gray-200 rounded-lg shadow-sm p-4">
                    <div className="animate-pulse">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center space-x-2">
                          <div className="h-9 w-9 bg-gray-200 rounded-md"></div>
                          <div className="h-4 bg-gray-200 rounded w-16"></div>
                        </div>
                      </div>
                      <div className="h-6 bg-gray-200 rounded mb-2"></div>
                      <div className="h-4 bg-gray-200 rounded mb-3"></div>
                      <div className="space-y-2">
                        <div className="h-3 bg-gray-200 rounded w-3/4"></div>
                        <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Empty State */}
            {!loading && certifications.length === 0 && (
              <div className="text-center py-12">
                <AcademicCapIcon className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No certifications found</h3>
                <p className="text-gray-500 mb-6">
                  {searchQuery || getActiveFiltersCount() > 0 ? (
                    'Try adjusting your search terms or filters'
                  ) : (
                    'No certifications are available at this time'
                  )}
                </p>
                {(searchQuery || getActiveFiltersCount() > 0) && (
                  <button
                    onClick={() => {
                      setSearchQuery('');
                      setFilters({});
                      setStatusFilter('all');
                      setCurrentPage(1);
                      updateUrlParams({ q: '', page: '1', status: 'all' });
                    }}
                    className="text-secondary-600 hover:text-secondary-500 font-medium"
                  >
                    Clear all filters
                  </button>
                )}
              </div>
            )}

            {/* Certifications Grid/List */}
            {!loading && certifications.length > 0 && (
              <>
                <div className={viewMode === 'grid' 
                  ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8" 
                  : "space-y-4 mb-8"
                }>
                  {certifications.map((certification) => (
                    <CertificationCard
                      key={certification.id}
                      certification={certification}
                      isFavorite={userFavorites.includes(certification.id)}
                      onFavoriteToggle={handleCertificationToggleFavorite}
                      className={viewMode === 'list' ? 'w-full' : ''}
                    />
                  ))}
                </div>

                {/* Pagination */}
                {totalPages > 1 && (
                  <Pagination
                    currentPage={currentPage}
                    totalPages={totalPages}
                    totalItems={totalItems}
                    itemsPerPage={itemsPerPage}
                    onPageChange={handlePageChange}
                  />
                )}
              </>
            )}
          </main>
        </div>
      </div>
    </div>
  );
}