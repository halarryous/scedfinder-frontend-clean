'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { scedApi, userApi } from '@/lib/api-services';
import { useAuth } from '@/contexts/AuthContext';
import { SCEDCourse, Certification } from '@/types';
import CertificationCard from '@/components/Shared/CertificationCard';
import toast from 'react-hot-toast';
import { 
  BookOpenIcon,
  HeartIcon,
  ArrowLeftIcon,
  HashtagIcon,
  AcademicCapIcon,
  ClockIcon,
  BuildingOfficeIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
  TagIcon,
  ShareIcon,
  PrinterIcon
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartIconSolid } from '@heroicons/react/24/solid';

interface CourseDetailPageProps {
  params: { id: string };
}

export default function CourseDetailPage({ params }: CourseDetailPageProps) {
  const router = useRouter();
  const { user } = useAuth();
  const [course, setCourse] = useState<SCEDCourse | null>(null);
  const [certifications, setCertifications] = useState<{
    required: Certification[];
    preferred: Certification[];
    alternative: Certification[];
  }>({ required: [], preferred: [], alternative: [] });
  const [loading, setLoading] = useState(true);
  const [certLoading, setCertLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isFavorite, setIsFavorite] = useState(false);
  const [favLoading, setFavLoading] = useState(false);

  useEffect(() => {
    loadCourseDetails();
    if (user) {
      checkIfFavorite();
    }
  }, [params.id, user]);

  const loadCourseDetails = async () => {
    try {
      setLoading(true);
      setError(null);

      // Load course details
      const courseResponse = await scedApi.getCourseById(params.id);
      setCourse(courseResponse.data.course);

      // Load certification requirements
      setCertLoading(true);
      const certResponse = await scedApi.getCourseCertifications(params.id);
      setCertifications(certResponse.data);

    } catch (err: any) {
      console.error('Failed to load course details:', err);
      setError(err.response?.data?.error?.message || 'Failed to load course details');
    } finally {
      setLoading(false);
      setCertLoading(false);
    }
  };

  const checkIfFavorite = async () => {
    try {
      const favoritesResponse = await userApi.getFavorites();
      const isFav = favoritesResponse.data.some(f => 
        f.favorite_type === 'sced_course' && f.item_id === params.id
      );
      setIsFavorite(isFav);
    } catch (error) {
      console.error('Failed to check favorite status:', error);
    }
  };

  const handleToggleFavorite = async () => {
    if (!user) {
      toast.error('Please login to save favorites');
      return;
    }

    setFavLoading(true);
    try {
      if (isFavorite) {
        // Remove from favorites (would need favorite ID in real implementation)
        setIsFavorite(false);
        toast.success('Removed from favorites');
      } else {
        await userApi.addToFavorites({
          favorite_type: 'sced_course',
          item_id: params.id,
        });
        setIsFavorite(true);
        toast.success('Added to favorites');
      }
    } catch (error: any) {
      const message = error.response?.data?.error?.message || 'Failed to update favorites';
      toast.error(message);
    } finally {
      setFavLoading(false);
    }
  };

  const handleShare = async () => {
    if (navigator.share && course) {
      try {
        await navigator.share({
          title: course.course_code_description,
          text: `Check out this SCED course: ${course.course_code_description} (${course.course_code})`,
          url: window.location.href,
        });
      } catch (error) {
        // Fallback to copying URL
        navigator.clipboard.writeText(window.location.href);
        toast.success('Course URL copied to clipboard');
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast.success('Course URL copied to clipboard');
    }
  };

  const handlePrint = () => {
    window.print();
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="animate-pulse">
            <div className="flex items-center mb-6">
              <div className="h-4 w-20 bg-gray-200 rounded"></div>
            </div>
            <div className="bg-white rounded-lg shadow-sm p-8">
              <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
              <div className="h-6 bg-gray-200 rounded w-1/4 mb-6"></div>
              <div className="space-y-4">
                <div className="h-4 bg-gray-200 rounded w-full"></div>
                <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                <div className="h-4 bg-gray-200 rounded w-4/6"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Error Loading Course</h3>
            <p className="text-gray-500 mb-6">{error}</p>
            <div className="space-x-3">
              <button
                onClick={() => router.back()}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                <ArrowLeftIcon className="h-4 w-4 mr-2" />
                Go Back
              </button>
              <button
                onClick={loadCourseDetails}
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm bg-primary-600 text-sm font-medium text-white hover:bg-primary-700"
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <BookOpenIcon className="h-12 w-12 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Course Not Found</h3>
            <p className="text-gray-500 mb-6">The requested course could not be found.</p>
            <Link
              href="/sced"
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm bg-primary-600 text-sm font-medium text-white hover:bg-primary-700"
            >
              <BookOpenIcon className="h-4 w-4 mr-2" />
              Browse All Courses
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumb */}
        <nav className="flex items-center space-x-2 text-sm text-gray-500 mb-8">
          <Link href="/sced" className="hover:text-gray-700">
            SCED Courses
          </Link>
          <span>/</span>
          <span className="text-gray-900 font-medium">{course.course_code}</span>
        </nav>

        {/* Main Content */}
        <div className="bg-white rounded-lg shadow-sm">
          {/* Header */}
          <div className="px-6 py-8 sm:px-8 border-b border-gray-200">
            <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between space-y-4 sm:space-y-0">
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="p-3 bg-primary-50 rounded-lg">
                    <BookOpenIcon className="h-8 w-8 text-primary-600" />
                  </div>
                  <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
                    {course.course_code}
                  </span>
                </div>
                <h1 className="text-2xl font-bold text-gray-900 mb-3">
                  {course.course_code_description}
                </h1>
                {course.course_description && (
                  <p className="text-lg text-gray-600 leading-relaxed">
                    {course.course_description}
                  </p>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleShare}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  <ShareIcon className="h-4 w-4 mr-2" />
                  Share
                </button>
                
                <button
                  onClick={handlePrint}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  <PrinterIcon className="h-4 w-4 mr-2" />
                  Print
                </button>

                {user && (
                  <button
                    onClick={handleToggleFavorite}
                    disabled={favLoading}
                    className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50"
                  >
                    {isFavorite ? (
                      <HeartIconSolid className="h-4 w-4 mr-2 text-red-500" />
                    ) : (
                      <HeartIcon className="h-4 w-4 mr-2" />
                    )}
                    {isFavorite ? 'Favorited' : 'Add to Favorites'}
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Course Details */}
          <div className="px-6 py-8 sm:px-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Column */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Course Information</h3>
                  <div className="space-y-4">
                    {course.course_subject_area && (
                      <div className="flex items-center">
                        <HashtagIcon className="h-5 w-5 text-gray-400 mr-3" />
                        <div>
                          <span className="text-sm font-medium text-gray-500">Subject Area</span>
                          <p className="text-gray-900">{course.course_subject_area}</p>
                        </div>
                      </div>
                    )}

                    {course.cte_indicator === 'Y' && (
                      <div className="flex items-center">
                        <BuildingOfficeIcon className="h-5 w-5 text-gray-400 mr-3" />
                        <div>
                          <span className="text-sm font-medium text-gray-500">Course Type</span>
                          <p className="text-gray-900">CTE Course</p>
                        </div>
                      </div>
                    )}

                    <div className="grid grid-cols-2 gap-4">
                      {course.course_level && (
                        <div className="flex items-center">
                          <AcademicCapIcon className="h-5 w-5 text-gray-400 mr-3" />
                          <div>
                            <span className="text-sm font-medium text-gray-500">Course Level</span>
                            <p className="text-gray-900">{course.course_level}</p>
                          </div>
                        </div>
                      )}

                      {(course.ap_indicator === 'Y' || course.ib_indicator === 'Y') && (
                        <div className="flex items-center">
                          <ClockIcon className="h-5 w-5 text-gray-400 mr-3" />
                          <div>
                            <span className="text-sm font-medium text-gray-500">Special Programs</span>
                            <div className="flex space-x-2">
                              {course.ap_indicator === 'Y' && (
                                <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">AP</span>
                              )}
                              {course.ib_indicator === 'Y' && (
                                <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">IB</span>
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {course.certifications && course.certifications.length > 0 && (
                      <div className="flex items-start">
                        <TagIcon className="h-5 w-5 text-gray-400 mr-3 mt-1" />
                        <div>
                          <span className="text-sm font-medium text-gray-500">Required Certifications</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {course.certifications.slice(0, 3).map((cert, index) => (
                              <span key={index} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary-50 text-primary-700">
                                {cert}
                              </span>
                            ))}
                            {course.certifications.length > 3 && (
                              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-50 text-gray-500">
                                +{course.certifications.length - 3} more
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Industry Alignment */}
                {course.industry_alignment && course.industry_alignment.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">Industry Alignment</h4>
                    <div className="flex flex-wrap gap-2">
                      {course.industry_alignment.map((industry, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-primary-50 text-primary-800"
                        >
                          {industry}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Prerequisites */}
                {course.prerequisite_courses && course.prerequisite_courses.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">Prerequisites</h4>
                    <ul className="space-y-2">
                      {course.prerequisite_courses.map((prereq, index) => (
                        <li key={index} className="flex items-center text-sm text-gray-600">
                          <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2 flex-shrink-0" />
                          {prereq}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* National Standards */}
                {course.national_standards && course.national_standards.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">National Standards</h4>
                    <ul className="space-y-2">
                      {course.national_standards.map((standard, index) => (
                        <li key={index} className="flex items-center text-sm text-gray-600">
                          <CheckCircleIcon className="h-4 w-4 text-blue-500 mr-2 flex-shrink-0" />
                          {standard}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {/* Right Column - Certifications */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Teacher Certification Requirements</h3>
                  
                  {certLoading ? (
                    <div className="space-y-4">
                      {[...Array(2)].map((_, i) => (
                        <div key={i} className="animate-pulse">
                          <div className="h-4 bg-gray-200 rounded w-1/3 mb-2"></div>
                          <div className="h-20 bg-gray-200 rounded"></div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="space-y-6">
                      {/* Required Certifications */}
                      {certifications.required.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-green-700 mb-3 flex items-center">
                            <CheckCircleIcon className="h-4 w-4 mr-2" />
                            Required Certifications ({certifications.required.length})
                          </h4>
                          <div className="space-y-3">
                            {certifications.required.map((cert) => (
                              <div key={cert.id} className="border border-green-200 rounded-lg">
                                <CertificationCard
                                  certification={cert}
                                  showFavoriteButton={false}
                                  className="border-none shadow-none"
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Preferred Certifications */}
                      {certifications.preferred.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-blue-700 mb-3 flex items-center">
                            <InformationCircleIcon className="h-4 w-4 mr-2" />
                            Preferred Certifications ({certifications.preferred.length})
                          </h4>
                          <div className="space-y-3">
                            {certifications.preferred.map((cert) => (
                              <div key={cert.id} className="border border-blue-200 rounded-lg">
                                <CertificationCard
                                  certification={cert}
                                  showFavoriteButton={false}
                                  className="border-none shadow-none"
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Alternative Certifications */}
                      {certifications.alternative.length > 0 && (
                        <div>
                          <h4 className="text-sm font-semibold text-yellow-700 mb-3 flex items-center">
                            <ExclamationTriangleIcon className="h-4 w-4 mr-2" />
                            Alternative Certifications ({certifications.alternative.length})
                          </h4>
                          <div className="space-y-3">
                            {certifications.alternative.map((cert) => (
                              <div key={cert.id} className="border border-yellow-200 rounded-lg">
                                <CertificationCard
                                  certification={cert}
                                  showFavoriteButton={false}
                                  className="border-none shadow-none"
                                />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* No Certifications */}
                      {certifications.required.length === 0 && 
                       certifications.preferred.length === 0 && 
                       certifications.alternative.length === 0 && (
                        <div className="text-center py-8 border border-gray-200 rounded-lg bg-gray-50">
                          <AcademicCapIcon className="h-8 w-8 text-gray-300 mx-auto mb-2" />
                          <p className="text-sm text-gray-500">
                            No specific certification requirements found for this course.
                          </p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Back Button */}
        <div className="mt-8">
          <button
            onClick={() => router.back()}
            className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-2" />
            Back to Search Results
          </button>
        </div>
      </div>
    </div>
  );
}